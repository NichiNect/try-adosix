import type { HttpContext } from '@adonisjs/core/http'
import app from '@adonisjs/core/services/app'
import db from '@adonisjs/lucid/services/db'
import { create{{ moduleName }}Validator, update{{ moduleName }}Validator } from '#validators/{{ validatorNamespace }}'
import fs from 'node:fs'
import { DateTime } from 'luxon'

export default class {{ controllerName }} {

    /**
     * List of field is file
     */
    protected fieldIsFile: string[] = []

    /**
    * Display a list of resource
    */
    public async index({ request, response }: HttpContext) {
        
        const search: string = request.input('search') || ''
        const page: number = request.input('page') || 1
        const limit: number = request.input('limit') || 10
        const orderDirection: 'asc' | 'desc' = request.input('orderDirection') || 'desc'

        const searchableColumn: string[] = [
        ]

        // * Find Data
        const data = await db.from('{{ modelNamePluralLowerCase }}')
            .if(search != '', (query: any) => {
                return query.where((searchWhere: any) => {

                    for (const item of searchableColumn) {
                        searchWhere.orWhere(item, 'LIKE', `%${search}%`)
                    }
                })
            })
            .orderBy('created_at', orderDirection)
            .paginate(page, limit)

        // * Response
        return response.send({
            message: 'Success',
            data
        })
    }

    /**
    * Handle form submission for the create action
    */
    public async store({ request, response }: HttpContext) {

        // * Validate Request
        const validatedData = await request.validateUsing(create{{ moduleName }}Validator)

        // * File Handler
        const fieldUploaded: any = {}
        if (this.fieldIsFile?.length > 0) {

            for (const fieldFile of this.fieldIsFile) {

                const file = request.file(fieldFile)

                // * Write uploaded file to storage
                let fileName: string = ''
                if (file) {

                    fileName = `${Date.now()}-${file.clientName}`
                    await file.move(app.makePath('uploads/{{ modelNamePluralLowerCase }}'), {
                        name: fileName
                    })
                    fieldUploaded[fieldFile] = (fileName != '') ? `uploads/{{ modelNamePluralLowerCase }}/${fileName}` : ''
                }
            }
        }

        // * Process to DB
        const created = await db.table('{{ modelNamePluralLowerCase }}')
            .insert({
                ...validatedData,
                ...fieldUploaded,
                created_at: DateTime.now(),
                updated_at: DateTime.now(),
            })

        // * Response
        return response.send({
            message: 'Success',
            data: created
        })
    }

    /**
    * Show individual record
    */
    public async show({ params, response }: HttpContext) {

        // * Find Data
        const data = await db.from('{{ modelNamePluralLowerCase }}')
            .where('id', params.id)
            .first()

        if (!data) {
            return response.abort({
                message: 'Data not found'
            }, 404)
        }

        // * Response
        return response.send({
            message: 'Success',
            data
        })
    }

    /**
    * Handle form submission for the edit action
    */
    async update({ params, request, response }: HttpContext) {

        // * Validate Request
        const validatedData = await request.validateUsing(update{{ moduleName }}Validator)

        const trx = await db.transaction()

        // * Find Data
        const data = await trx.from('{{ modelNamePluralLowerCase }}')
            .where('id', params.id)
            .forUpdate()
            .first()

        if (!data) {
            return response.abort({
                message: 'Data not found'
            }, 404)
        }

        // * File Handler
        const fieldUploaded: any = {}
        if (this.fieldIsFile?.length > 0) {

            for (const fieldFile of fieldIsFile) {

                const file = request.file(fieldFile)

                // * Write uploaded file to storage
                let fileName: string = ''
                if (file) {

                    // * Delete old file
                    if (data[fieldFile]) {

                        fs.unlink(data[fieldFile] as unknown as string, (err: any) => {
                            console.error('Error: failed to delete old file')
                            console.error(err)
                        })
                    }

                    fileName = `${Date.now()}-${file.clientName}`
                    await file.move(app.makePath('uploads/{{ modelNamePluralLowerCase }}'), {
                        name: fileName
                    })
                    fieldUploaded[fieldFile] = (fileName != '') ? `uploads/{{ modelNamePluralLowerCase }}/${fileName}` : ''
                }
            }
        }

        // * Process to DB
        await trx.from('{{ modelNamePluralLowerCase }}')
            .update({
                ...validatedData,
                ...fieldUploaded,
                updated_at: DateTime.now()
            }, ['id'])
            .catch( async (err: any) => {
                console.error(err)
                await trx.rollback()
                return response.abort({
                    message: 'Error: failed to insert data'
                }, 500)
            })

        await trx.commit()

        // * Response
        return response.send({
            message: 'Success',
            data: data
        })
    }

    /**
    * Delete record
    */
    async destroy({ params, response }: HttpContext) {

        const trx = await db.transaction()

        // * Find Data
        const data = await trx.from('{{ modelNamePluralLowerCase }}')  
            .where('id', params.id)
            .first()

        if (!data) {
            return response.abort({
                message: 'Data not found'
            }, 404)
        }

        // * Remove file if exists
        if (this.fieldIsFile?.length > 0) {

            for (const fieldFile of this.fieldIsFile) {

                if (data[fieldFile]) {
                    fs.unlink(data[fieldFile] as unknown as string, (err: any) => {
                        console.error('Error: failed to delete file')
                        console.error(err)
                    })
                }
            }
        }

        // * Process to DB
        await trx.from('{{ modelNamePluralLowerCase }}')
            .where('id', data.id)
            .delete()
            .catch( async (err: any) => {
                console.error(err)
                await trx.rollback()
                return response.abort({
                    message: 'Error: failed to delete data'
                }, 500)
            })

        await trx.commit()

        // * Response
        return response.send({
            message: 'Success',
            data
        })
    }
}